se_vector <- df_to_plot$sd_log2FoldChange/sqrt(df_to_plot$num_sgRNAs)
se_vector[is.na(se_vector)] <- df_to_plot$lfcSE[is.na(se_vector)]
df_to_plot$conf <- qnorm(0.975)*se_vector
plot_p <- ggplot(df_to_plot, aes(x=time, y=wmean_log2FoldChange, ymin=wmean_log2FoldChange-conf, ymax=wmean_log2FoldChange+conf, group=sgRNA_target, color=factor(sgRNA_target), fill=factor(sgRNA_target))) + geom_line(linewidth=0.5) + geom_ribbon(linetype=0, alpha=0.1) + theme_light() + xlab("Time (generations)") + ylab("Log2FC")
return(plot_p)
}
lineplot_severalColours_meanlog2 <- function(df_to_plot){
plot_p <- ggplot(df_to_plot, aes(x=time, y=wmean_log2FoldChange, color=factor(sgRNA_target))) + geom_line(linewidth=0.3) + theme_light() + xlab("Time (generations)") + ylab("Log2FC")
return(plot_p)
}
lineplot_CVinterval_severalColours_log2 <- function(df_to_plot){
df_to_plot$conf <- qnorm(0.975)*df_to_plot$lfcSE
alpha_values <- 1-df_to_plot$weight_lfcSE
names(alpha_values) <- df_to_plot$sgRNA
plot_p <- ggplot(df_to_plot, aes(x=time, y=log2FoldChange, ymin=log2FoldChange-conf, ymax=log2FoldChange+conf, group=sgRNA, color=factor(sgRNA), fill=factor(sgRNA))) + new_scale("alpha") + geom_line(linewidth=0.3) + geom_ribbon(linetype=0, aes(alpha=sgRNA)) + scale_alpha_manual(values=alpha_values) + theme_light() + xlab("Time (generations)") + ylab("Log2FC")
print(unique(alpha_values))
return(plot_p)
}
lineplot_severalColours_log2 <- function(df_to_plot){
plot_p <- ggplot(df_to_plot, aes(x=time, y=log2FoldChange, group=sgRNA, color=factor(sgRNA))) + new_scale("alpha") + geom_line(linewidth=0.3) + theme_light() + xlab("Time (generations)") + ylab("Log2FC")
return(plot_p)
}
smaller_subset <- unique(subset(DESeq_result_table, DESeq_result_table$sgRNA_target %in% c("ssl0564", "cpcG", "pmgA", "apqZ", "ctrl1") & DESeq_result_table$condition=="CO2_4percent")[,c("sd_log2FoldChange", "lfcSE", "time", "wmean_log2FoldChange", "sgRNA_target", "sgRNA", "log2FoldChange", "num_sgRNAs")])
colors_vector <- c("apqZ"="#117733ff", "cpcG"="#cc6677ff", "ssl0564"="#ddcc77ff", "ctrl1"="#88cceeff", "pmgA"="#332288ff") # other compatible colors: c("#aa4499ff","#44aa99ff","#117733ff", "#882255ff")
p <- lineplot_CVinterval_severalColours_meanlog2(smaller_subset) + ylim(-6,+4.2) + scale_color_manual(values=colors_vector, na.value="grey40") + scale_fill_manual(values=colors_vector, na.value="grey70")
p
ggsave("../R_results_controlssgRNAs/growthCurves/variants_timeLinePlot_4perc.pdf", plot=p)
ggsave("../R_results_controlssgRNAs/growthCurves/variants_timeLinePlot_4perc.png", plot=p)
smaller_subset <- unique(subset(DESeq_result_table, DESeq_result_table$sgRNA_target %in% c("ssl0564", "cpcG", "pmgA", "apqZ", "ctrl1") & DESeq_result_table$condition=="CO2_30percent")[,c("sd_log2FoldChange", "lfcSE", "time", "wmean_log2FoldChange", "sgRNA_target", "sgRNA", "log2FoldChange", "num_sgRNAs")])
p <- lineplot_CVinterval_severalColours_meanlog2(smaller_subset) + ylim(-6,+4.2) + scale_color_manual(values=colors_vector, na.value="grey40") + scale_fill_manual(values=colors_vector, na.value="grey70")
p
ggsave("../R_results_controlssgRNAs/growthCurves/variants_timeLinePlot_30perc.pdf", plot=p)
ggsave("../R_results_controlssgRNAs/growthCurves/variants_timeLinePlot_30perc.png", plot=p)
### code functional enrichment function
# read in term_to_gene and term_to_name for enricher()
term_to_gene <- read.table("../input/2024-01-18_GOterms_slrIdentifier.tsv", sep="\t", header=T)
term_to_gene <- term_to_gene[,c(2,1)]
names(term_to_gene) <- c("GO_ID", "locus_tag")
term_to_name <- read.delim("../input/term_to_name.csv", sep="\t", header=T)
columns_to_show  <- c(2,3,4,5,7,8)
columns_to_show_KEGG <- c(1,2,3,4,7)
DESeq_result_table_4percent <- unique(subset(DESeq_result_table, DESeq_result_table$condition=="CO2_4percent" & DESeq_result_table$time==8)[c("wmean_fitness", "locus")])
geneList <- DESeq_result_table_4percent$wmean_fitness
names(geneList) <- DESeq_result_table_4percent$locus
geneList = sort(geneList, decreasing = TRUE)
set.seed(513)
go_gsea_object <- GSEA(geneList, TERM2GENE = term_to_gene, TERM2NAME=term_to_name, seed=TRUE)
print(head(go_gsea_object)[,columns_to_show])
write.csv(go_gsea_object, "../R_results_controlssgRNAs/GSEA_output/GO_GSEA_CRISPRi_4percent.csv")
set.seed(914)
kegg_gsea_object <- gseKEGG(geneList, organism="syn", minGSSize=10, pvalueCutoff = 0.05, seed=TRUE)
print(head(kegg_gsea_object)[,columns_to_show_KEGG])
write.csv(kegg_gsea_object, "../R_results_controlssgRNAs/GSEA_output/KEGG_GSEA_CRISPRi_4percent.csv")
nrow(go_gsea_object)
go_gsea_object[,c(1:5)]
KEGG_gsea_object[,c(1:5)]
kegg_gsea_object[,c(1:5)]
p <- gseaplot2(go_gsea_object, geneSetID =c(3, 10, 15, 18, 21, 22, 23, 24,25,26))
p
ggsave("../R_results_controlssgRNAs/GSEA_output/GO_GSEA_4perc_subset.pdf", plot=p, width=20, height=25, units="cm")
p <- gseaplot2(kegg_gsea_object, geneSetID =1:8)
p
ggsave("../R_results_controlssgRNAs/GSEA_output/KEGG_GSEA_4perc_part1.pdf", plot=p, width=20, height=25, units="cm")
p <- gseaplot2(kegg_gsea_object, geneSetID =9:17)
p
ggsave("../R_results_controlssgRNAs/GSEA_output/KEGG_GSEA_4perc_part2.pdf", plot=p, width=20, height=25, units="cm")
p <- gseaplot2(kegg_gsea_object, geneSetID =18:25)
p
ggsave("../R_results_controlssgRNAs/GSEA_output/KEGG_GSEA_4perc_part3.pdf", plot=p, width=20, height=25, units="cm")
DESeq_result_table_30percent <- unique(subset(DESeq_result_table, DESeq_result_table$condition=="CO2_30percent" & DESeq_result_table$time==8)[c("wmean_fitness", "locus")])
geneList <- DESeq_result_table_30percent$wmean_fitness
names(geneList) <- DESeq_result_table_30percent$locus
geneList = sort(geneList, decreasing = TRUE)
set.seed(513)
go_gsea_object <- GSEA(geneList, TERM2GENE = term_to_gene, TERM2NAME=term_to_name, seed=TRUE)
print(head(go_gsea_object)[,columns_to_show])
write.csv(go_gsea_object, "../R_results_controlssgRNAs/GSEA_output/GO_GSEA_CRISPRi_30percent.csv")
set.seed(914)
kegg_gsea_object <- gseKEGG(geneList, organism="syn", minGSSize=10, pvalueCutoff = 0.05, seed=TRUE)
print(head(kegg_gsea_object)[,columns_to_show_KEGG])
write.csv(kegg_gsea_object, "../R_results_controlssgRNAs/GSEA_output/KEGG_GSEA_CRISPRi_30percent.csv")
go_gsea_object[,c(1:5)]
go_gsea_object[,c(1:3)]
kegg_gsea_object[,c(1:5)]
kegg_gsea_object[,c(1:3)]
kegg_gsea_object[,c(1:2)]
nrow(kegg_gsea_object[,c(1:2)]
)
require("knitr")
library(ggplot2)
library(ggrepel)
library(ggpubr)
library(tidyverse)
library(magrittr)
library(clusterProfiler)
library(enrichplot)
library(pheatmap)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
load("../results_controlsgRNAs/fitness/result.Rdata")
num_sgRNAs <- read_tsv("../input/number_sgRNAs_per_target.tsv", col_names = c("sgRNA_target", "num_sgRNAs"))
DESeq_result_table <- left_join(DESeq_result_table, num_sgRNAs)
count_matrix <- read_tsv("../results_controlsgRNAs/prepare/all_counts.tsv")
count_matrix$Gene <- NULL
df_samplesheet <- readr::read_csv("../input/samplesheet_CRISPRi_CO2_Elena.csv", col_types = cols()) %>%
select(all_of(c("sample", "condition", "replicate", "time", "group", "reference_group"))) %>%
dplyr::mutate(group = factor(`group`))
df_samplesheet$name <- paste("gen_", df_samplesheet$time, "_r_", df_samplesheet$replicate, sep="")
plot_controls_sgRNAs <- DESeq_result_table %>% filter(grepl("ctrl", sgRNA_target)) %>%
ggplot(aes(x = time, y = log2FoldChange, color = sgRNA_target)) +
geom_line(linewidth = 1) + geom_point(size = 2) + ylim(-5, 5) + facet_wrap(~ condition, ncol = 4)
print(plot_controls_sgRNAs)
ggsave("../R_results_controlssgRNAs/plot_control_sgRNAs.pdf", plot=plot_controls_sgRNAs, width=12, height=12, units="cm")
df_counts <- tidyr::pivot_longer(count_matrix,
cols = 2:ncol(count_matrix),
names_to = "sample", values_to = "n_reads"
)
# sort
df_counts <- arrange(df_counts, sample)
#df_counts <- left_join(df_samplesheet, df_counts)
df_correlation <- df_counts %>%
tidyr::pivot_wider(names_from = "sample", values_from = "n_reads") %>%
dplyr::select(-c(1)) %>%
cor()
# https://bioinformatics.stackexchange.com/questions/22502/manually-set-range-of-colour-scale-in-pheatmap-in-r
color.divisions <- 100
annotation_days = data.frame(row.names=unique(row.names(df_correlation)), generation=as.character(c(0, 0, 0, 10, 10, 10, 4, 4, 4, 8, 8, 8, 0, 0, 0, 0, 10, 10, 10, 10, 4, 4, 4, 4, 8, 8, 8, 8)), condition=c(rep("30perc",12), rep("4perc", 16)), replicate=as.character(c(rep(c(1,2,3),4), rep(c(4,5,6,7), 4))))
# https://stackoverflow.com/questions/41628450/r-pheatmap-change-annotation-colors-and-prevent-graphics-window-from-popping-up
# choose colors for replicate that make difference between the two conditions clearly obvious --> four colours that are similar for HC, three that are similar for LD, let replicate 3 of LD _pop_
# choose gradient of colors for generations
# e.g. Tol from https://davidmathlogic.com/colorblind/#%23D81B60-%231E88E5-%23FFC107-%23004D40
okabe <- c("#f0e442ff", "#e69f00ff", "#d55e00ff", "#cc79a7ff", "#009e73ff", "#56b4e9ff", "#0072b2ff", "#aaaaaaff")
tol <- c("#882255ff","#aa4499ff","#cc6677ff","#ddcc77ff","#88cceeff","#44aa99ff","#117733ff","#332288ff")
okabe_gen <- okabe
names(okabe_gen) <- unique(annotation_days$generation)
okabe_replic <- okabe[1:7]
names(okabe_replic) <- unique(annotation_days$replicate)
annotation_color_list <- list(condition=c("cont"=okabe[7], "LD"=okabe[2]), generation=okabe_gen, replicate=okabe_replic)
okabe <- c("#fff2ecff","#f0e442ff", "#f5a700ff", "#9a4400ff")
okabe_gen <- okabe
names(okabe_gen) <- c("0", "4", "8", "10")
based_on_col <- c("#ff9dd5ff","#cc84aeff","#9a5b83ff","#009affff","#007acbff","#005b98ff","#003d66ff")
names(based_on_col) <- unique(annotation_days$replicate)
annotation_color_list <- list(condition=c("4perc"="#005a96ff", "30perc"="#c57ba5ff"), replicate=based_on_col, generation=okabe_gen)
p <- pheatmap(df_correlation, display_numbers=TRUE, treeheight_col=0, cutree_rows = 6, cutree_cols = 6, annotation_row = annotation_days, annotation_colors = annotation_color_list, breaks = seq(-1,1, length.out=(color.divisions + 1)))
p
ggsave("../R_results_controlssgRNAs/correlation/correlation_samples_clustering.png", plot=p, width=11.5, height=8)
ggsave("../R_results_controlssgRNAs/correlation/correlation_samples_clustering.pdf", plot=p, width=11.5, height=8)
p <- pheatmap(df_correlation, display_numbers=FALSE, treeheight_col=0, cutree_rows = 6, cutree_cols = 6, annotation_row = annotation_days, annotation_colors = annotation_color_list, breaks = seq(-1,1, length.out=(color.divisions + 1)))
p
ggsave("../R_results_controlssgRNAs/correlation/correlation_samples_clustering_woNumbers.png", plot=p, width=11.5, height=8)
ggsave("../R_results_controlssgRNAs/correlation/correlation_samples_clustering_woNumbers.pdf", plot=p, width=11.5, height=8)
mapping_gene_locus <- read_tsv("../input/2023-02-24_mapping_trivial_names.tsv", show_col_types=FALSE)
names(mapping_gene_locus) <- c("sgRNA_target", "locus")
DESeq_result_table <- DESeq_result_table %>% left_join(mapping_gene_locus)
annotation <- read_tsv("../input/annotation_locusTags_stand13012021.csv", show_col_types = FALSE)
annotation_2 <- annotation[,c(1,2,3)]
names(annotation_2) <- c("locus", "Gene name","Product")
DESeq_result_table <- DESeq_result_table %>% left_join(annotation_2)
write_tsv(DESeq_result_table, file="../R_results_controlssgRNAs/annotated_DESeq_result_table.tsv")
df_reduced_info <- unique(subset(DESeq_result_table, DESeq_result_table$time==8 | DESeq_result_table$time==14)[,c(2,25,26,27,4,20,21,23,24)])
write_tsv(df_reduced_info, file="../R_results_controlssgRNAs/Reduced_annotated_DESeq_result_table.tsv")
df_red_wide <- pivot_wider(df_reduced_info, names_from=condition, values_from=c(wmean_fitness, sd_fitness, p_fitness_adj, comb_score))
write_tsv(df_red_wide, file="../R_results_controlssgRNAs/Wide_DESeq_result_table.tsv")
df_reduced <- unique(subset(DESeq_result_table, DESeq_result_table$time==8)[,c(2,4,20)])
df_red_ncRNAs <- subset(df_reduced, grepl("nc_", df_reduced$sgRNA_target))
df_red_no_ncRNAs <- subset(df_reduced, !grepl("nc_", df_reduced$sgRNA_target))
df_red_wide <- pivot_wider(df_red_no_ncRNAs,names_from="condition", values_from=c("wmean_fitness"))
plot_fitness_fitness <- function(df_input, y_axis, y_axis_label, x_axis="CO2_4percent", x_axis_label="Weighted mean fitness 4% CO2", filename_save="../R_results_controlssgRNAs/wfitnes_plot.pdf"){
df_input$diff <- "NO"
df_input$diff[(df_input[[x_axis]] - df_input[[y_axis]] > 2.5) | (df_input[[x_axis]] - df_input[[y_axis]] < (-2.5))] <- "YES"
# prepare labels for plot
df_input$delabel <- NA
df_input$delabel[df_input$diff !="NO"] <- df_input$sgRNA_target[df_input$diff != "NO"]
mycolors <- c("darkblue",  "#d3d3d3b2")
names(mycolors) <- c("YES", "NO")
p <- ggplot(data=df_input, aes(x=eval(parse(text=x_axis)), y=eval(parse(text=y_axis)), label=delabel,col=diff)) + geom_point(alpha=0.5, show.legend = FALSE) +
theme_light() + labs(y=y_axis_label, x=x_axis_label) + theme(legend.position = "none") + geom_abline(intercept=0,slope=1,linetype="dashed",color="black") + geom_abline(intercept=-2.5, slope=1, linetype="dashed", color="black") + geom_abline(intercept=2.5, slope=1, linetype="dashed", color="black") + scale_colour_manual(values = mycolors) + geom_text_repel(fontface="italic") #+ xlim(-6, +7) +ylim(-6,+7)
ggsave(filename = filename_save, plot=p, width=12, height=12, units="cm")
return(p)
}
plot_fitness_fitness(df_red_wide, "CO2_30percent", y_axis_label="Weighted mean fitness 30% CO2", filename_save = "../R_results_controlssgRNAs/wfitness.pdf")
df_red_wide_ncRNA <- pivot_wider(df_red_ncRNAs,names_from="condition", values_from=c("wmean_fitness"))
plot_fitness_fitness(df_red_wide_ncRNA, "CO2_30percent", y_axis_label="Weighted mean fitness 30% CO2", filename_save = "../R_results_controlssgRNAs/ncRNA_wfitness.pdf")
lineplot_CVinterval_severalColours_meanlog2 <- function(df_to_plot){
se_vector <- df_to_plot$sd_log2FoldChange/sqrt(df_to_plot$num_sgRNAs)
se_vector[is.na(se_vector)] <- df_to_plot$lfcSE[is.na(se_vector)]
df_to_plot$conf <- qnorm(0.975)*se_vector
plot_p <- ggplot(df_to_plot, aes(x=time, y=wmean_log2FoldChange, ymin=wmean_log2FoldChange-conf, ymax=wmean_log2FoldChange+conf, group=sgRNA_target, color=factor(sgRNA_target), fill=factor(sgRNA_target))) + geom_line(linewidth=0.5) + geom_ribbon(linetype=0, alpha=0.1) + theme_light() + xlab("Time (generations)") + ylab("Log2FC")
return(plot_p)
}
lineplot_severalColours_meanlog2 <- function(df_to_plot){
plot_p <- ggplot(df_to_plot, aes(x=time, y=wmean_log2FoldChange, color=factor(sgRNA_target))) + geom_line(linewidth=0.3) + theme_light() + xlab("Time (generations)") + ylab("Log2FC")
return(plot_p)
}
lineplot_CVinterval_severalColours_log2 <- function(df_to_plot){
df_to_plot$conf <- qnorm(0.975)*df_to_plot$lfcSE
alpha_values <- 1-df_to_plot$weight_lfcSE
names(alpha_values) <- df_to_plot$sgRNA
plot_p <- ggplot(df_to_plot, aes(x=time, y=log2FoldChange, ymin=log2FoldChange-conf, ymax=log2FoldChange+conf, group=sgRNA, color=factor(sgRNA), fill=factor(sgRNA))) + new_scale("alpha") + geom_line(linewidth=0.3) + geom_ribbon(linetype=0, aes(alpha=sgRNA)) + scale_alpha_manual(values=alpha_values) + theme_light() + xlab("Time (generations)") + ylab("Log2FC")
print(unique(alpha_values))
return(plot_p)
}
lineplot_severalColours_log2 <- function(df_to_plot){
plot_p <- ggplot(df_to_plot, aes(x=time, y=log2FoldChange, group=sgRNA, color=factor(sgRNA))) + new_scale("alpha") + geom_line(linewidth=0.3) + theme_light() + xlab("Time (generations)") + ylab("Log2FC")
return(plot_p)
}
smaller_subset <- unique(subset(DESeq_result_table, DESeq_result_table$sgRNA_target %in% c("ssl0564", "cpcG", "pmgA", "apqZ", "ctrl1") & DESeq_result_table$condition=="CO2_4percent")[,c("sd_log2FoldChange", "lfcSE", "time", "wmean_log2FoldChange", "sgRNA_target", "sgRNA", "log2FoldChange", "num_sgRNAs")])
colors_vector <- c("apqZ"="#117733ff", "cpcG"="#cc6677ff", "ssl0564"="#ddcc77ff", "ctrl1"="#88cceeff", "pmgA"="#332288ff") # other compatible colors: c("#aa4499ff","#44aa99ff","#117733ff", "#882255ff")
p <- lineplot_CVinterval_severalColours_meanlog2(smaller_subset) + ylim(-6,+4.2) + scale_color_manual(values=colors_vector, na.value="grey40") + scale_fill_manual(values=colors_vector, na.value="grey70")
p
ggsave("../R_results_controlssgRNAs/growthCurves/variants_timeLinePlot_4perc.pdf", plot=p)
ggsave("../R_results_controlssgRNAs/growthCurves/variants_timeLinePlot_4perc.png", plot=p)
smaller_subset <- unique(subset(DESeq_result_table, DESeq_result_table$sgRNA_target %in% c("ssl0564", "cpcG", "pmgA", "apqZ", "ctrl1") & DESeq_result_table$condition=="CO2_30percent")[,c("sd_log2FoldChange", "lfcSE", "time", "wmean_log2FoldChange", "sgRNA_target", "sgRNA", "log2FoldChange", "num_sgRNAs")])
p <- lineplot_CVinterval_severalColours_meanlog2(smaller_subset) + ylim(-6,+4.2) + scale_color_manual(values=colors_vector, na.value="grey40") + scale_fill_manual(values=colors_vector, na.value="grey70")
p
ggsave("../R_results_controlssgRNAs/growthCurves/variants_timeLinePlot_30perc.pdf", plot=p)
ggsave("../R_results_controlssgRNAs/growthCurves/variants_timeLinePlot_30perc.png", plot=p)
### code functional enrichment function
# read in term_to_gene and term_to_name for enricher()
term_to_gene <- read.table("../input/2024-01-18_GOterms_slrIdentifier.tsv", sep="\t", header=T)
term_to_gene <- term_to_gene[,c(2,1)]
names(term_to_gene) <- c("GO_ID", "locus_tag")
term_to_name <- read.delim("../input/term_to_name.csv", sep="\t", header=T)
columns_to_show  <- c(2,3,4,5,7,8)
columns_to_show_KEGG <- c(1,2,3,4,7)
DESeq_result_table_4percent <- unique(subset(DESeq_result_table, DESeq_result_table$condition=="CO2_4percent" & DESeq_result_table$time==8)[c("wmean_fitness", "locus")])
geneList <- DESeq_result_table_4percent$wmean_fitness
names(geneList) <- DESeq_result_table_4percent$locus
geneList = sort(geneList, decreasing = TRUE)
set.seed(513)
go_gsea_object <- GSEA(geneList, TERM2GENE = term_to_gene, TERM2NAME=term_to_name, seed=TRUE)
print(head(go_gsea_object)[,columns_to_show])
write.csv(go_gsea_object, "../R_results_controlssgRNAs/GSEA_output/GO_GSEA_CRISPRi_4percent.csv")
set.seed(914)
kegg_gsea_object <- gseKEGG(geneList, organism="syn", minGSSize=10, pvalueCutoff = 0.05, seed=TRUE)
print(head(kegg_gsea_object)[,columns_to_show_KEGG])
write.csv(kegg_gsea_object, "../R_results_controlssgRNAs/GSEA_output/KEGG_GSEA_CRISPRi_4percent.csv")
p <- gseaplot2(go_gsea_object, geneSetID =c(3, 10, 15, 18, 21, 22, 23, 24,25,26))
p
ggsave("../R_results_controlssgRNAs/GSEA_output/GO_GSEA_4perc_subset.pdf", plot=p, width=20, height=25, units="cm")
p <- gseaplot2(kegg_gsea_object, geneSetID =1:8)
p
ggsave("../R_results_controlssgRNAs/GSEA_output/KEGG_GSEA_4perc_part1.pdf", plot=p, width=20, height=25, units="cm")
p <- gseaplot2(kegg_gsea_object, geneSetID =9:17)
p
ggsave("../R_results_controlssgRNAs/GSEA_output/KEGG_GSEA_4perc_part2.pdf", plot=p, width=20, height=25, units="cm")
p <- gseaplot2(kegg_gsea_object, geneSetID =18:25)
p
ggsave("../R_results_controlssgRNAs/GSEA_output/KEGG_GSEA_4perc_part3.pdf", plot=p, width=20, height=25, units="cm")
DESeq_result_table_30percent <- unique(subset(DESeq_result_table, DESeq_result_table$condition=="CO2_30percent" & DESeq_result_table$time==8)[c("wmean_fitness", "locus")])
geneList <- DESeq_result_table_30percent$wmean_fitness
names(geneList) <- DESeq_result_table_30percent$locus
geneList = sort(geneList, decreasing = TRUE)
set.seed(513)
go_gsea_object <- GSEA(geneList, TERM2GENE = term_to_gene, TERM2NAME=term_to_name, seed=TRUE)
print(head(go_gsea_object)[,columns_to_show])
write.csv(go_gsea_object, "../R_results_controlssgRNAs/GSEA_output/GO_GSEA_CRISPRi_30percent.csv")
set.seed(914)
kegg_gsea_object <- gseKEGG(geneList, organism="syn", minGSSize=10, pvalueCutoff = 0.05, seed=TRUE)
print(head(kegg_gsea_object)[,columns_to_show_KEGG])
write.csv(kegg_gsea_object, "../R_results_controlssgRNAs/GSEA_output/KEGG_GSEA_CRISPRi_30percent.csv")
p <- gseaplot2(go_gsea_object, geneSetID =c(3, 6,9,15,16,17,18,19,23,27,28,29,30,32,33,34))
nrow(go_gsea_object)
p <- gseaplot2(go_gsea_object, geneSetID =c(3, 6,9,15,16,17,18,19,23,27,28,29,30,32,33))
p
ggsave("../R_results_controlssgRNAs/GSEA_output/GO_GSEA_30perc_subset.pdf", plot=p, width=20, height=25, units="cm")
p <- gseaplot2(kegg_gsea_object, geneSetID =1:9)
p
ggsave("../R_results_controlssgRNAs/GSEA_output/KEGG_GSEA_30perc_part1.pdf", plot=p, width=20, height=25, units="cm")
p <- gseaplot2(kegg_gsea_object, geneSetID =10:18)
p
ggsave("../R_results_controlssgRNAs/GSEA_output/KEGG_GSEA_30perc_part2.pdf", plot=p, width=20, height=25, units="cm")
p <- gseaplot2(kegg_gsea_object, geneSetID =19:27)
p
ggsave("../R_results_controlssgRNAs/GSEA_output/KEGG_GSEA_30perc_part3.pdf", plot=p, width=20, height=25, units="cm")
p <- gseaplot2(kegg_gsea_object, geneSetID =28:36)
p
ggsave("../R_results_controlssgRNAs/GSEA_output/KEGG_GSEA_30perc_part4.pdf", plot=p, width=20, height=25, units="cm")
p <- gseaplot2(kegg_gsea_object, geneSetID =37:45)
p
ggsave("../R_results_controlssgRNAs/GSEA_output/KEGG_GSEA_30perc_part5.pdf", plot=p, width=20, height=25, units="cm")
require("knitr")
library(ggplot2)
library(ggrepel)
library(ggpubr)
library(tidyverse)
library(magrittr)
library(clusterProfiler)
library(enrichplot)
library(pheatmap)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
load("../results_controlsgRNAs/fitness/result.Rdata")
num_sgRNAs <- read_tsv("../input/number_sgRNAs_per_target.tsv", col_names = c("sgRNA_target", "num_sgRNAs"))
DESeq_result_table <- left_join(DESeq_result_table, num_sgRNAs)
count_matrix <- read_tsv("../results_controlsgRNAs/prepare/all_counts.tsv")
count_matrix$Gene <- NULL
df_samplesheet <- readr::read_csv("../input/samplesheet_CRISPRi_CO2_Elena.csv", col_types = cols()) %>%
select(all_of(c("sample", "condition", "replicate", "time", "group", "reference_group"))) %>%
dplyr::mutate(group = factor(`group`))
df_samplesheet$name <- paste("gen_", df_samplesheet$time, "_r_", df_samplesheet$replicate, sep="")
plot_controls_sgRNAs <- DESeq_result_table %>% filter(grepl("ctrl", sgRNA_target)) %>%
ggplot(aes(x = time, y = log2FoldChange, color = sgRNA_target)) +
geom_line(linewidth = 1) + geom_point(size = 2) + ylim(-5, 5) + facet_wrap(~ condition, ncol = 4)
print(plot_controls_sgRNAs)
ggsave("../R_results_controlssgRNAs/plot_control_sgRNAs.pdf", plot=plot_controls_sgRNAs, width=12, height=12, units="cm")
df_counts <- tidyr::pivot_longer(count_matrix,
cols = 2:ncol(count_matrix),
names_to = "sample", values_to = "n_reads"
)
# sort
df_counts <- arrange(df_counts, sample)
#df_counts <- left_join(df_samplesheet, df_counts)
df_correlation <- df_counts %>%
tidyr::pivot_wider(names_from = "sample", values_from = "n_reads") %>%
dplyr::select(-c(1)) %>%
cor()
# https://bioinformatics.stackexchange.com/questions/22502/manually-set-range-of-colour-scale-in-pheatmap-in-r
color.divisions <- 100
annotation_days = data.frame(row.names=unique(row.names(df_correlation)), generation=as.character(c(0, 0, 0, 10, 10, 10, 4, 4, 4, 8, 8, 8, 0, 0, 0, 0, 10, 10, 10, 10, 4, 4, 4, 4, 8, 8, 8, 8)), condition=c(rep("30perc",12), rep("4perc", 16)), replicate=as.character(c(rep(c(1,2,3),4), rep(c(4,5,6,7), 4))))
# https://stackoverflow.com/questions/41628450/r-pheatmap-change-annotation-colors-and-prevent-graphics-window-from-popping-up
# choose colors for replicate that make difference between the two conditions clearly obvious --> four colours that are similar for HC, three that are similar for LD, let replicate 3 of LD _pop_
# choose gradient of colors for generations
# e.g. Tol from https://davidmathlogic.com/colorblind/#%23D81B60-%231E88E5-%23FFC107-%23004D40
okabe <- c("#f0e442ff", "#e69f00ff", "#d55e00ff", "#cc79a7ff", "#009e73ff", "#56b4e9ff", "#0072b2ff", "#aaaaaaff")
tol <- c("#882255ff","#aa4499ff","#cc6677ff","#ddcc77ff","#88cceeff","#44aa99ff","#117733ff","#332288ff")
okabe_gen <- okabe
names(okabe_gen) <- unique(annotation_days$generation)
okabe_replic <- okabe[1:7]
names(okabe_replic) <- unique(annotation_days$replicate)
annotation_color_list <- list(condition=c("cont"=okabe[7], "LD"=okabe[2]), generation=okabe_gen, replicate=okabe_replic)
okabe <- c("#fff2ecff","#f0e442ff", "#f5a700ff", "#9a4400ff")
okabe_gen <- okabe
names(okabe_gen) <- c("0", "4", "8", "10")
based_on_col <- c("#ff9dd5ff","#cc84aeff","#9a5b83ff","#009affff","#007acbff","#005b98ff","#003d66ff")
names(based_on_col) <- unique(annotation_days$replicate)
annotation_color_list <- list(condition=c("4perc"="#005a96ff", "30perc"="#c57ba5ff"), replicate=based_on_col, generation=okabe_gen)
p <- pheatmap(df_correlation, display_numbers=TRUE, treeheight_col=0, cutree_rows = 6, cutree_cols = 6, annotation_row = annotation_days, annotation_colors = annotation_color_list, breaks = seq(-1,1, length.out=(color.divisions + 1)))
p
ggsave("../R_results_controlssgRNAs/correlation/correlation_samples_clustering.png", plot=p, width=11.5, height=8)
ggsave("../R_results_controlssgRNAs/correlation/correlation_samples_clustering.pdf", plot=p, width=11.5, height=8)
p <- pheatmap(df_correlation, display_numbers=FALSE, treeheight_col=0, cutree_rows = 6, cutree_cols = 6, annotation_row = annotation_days, annotation_colors = annotation_color_list, breaks = seq(-1,1, length.out=(color.divisions + 1)))
p
ggsave("../R_results_controlssgRNAs/correlation/correlation_samples_clustering_woNumbers.png", plot=p, width=11.5, height=8)
ggsave("../R_results_controlssgRNAs/correlation/correlation_samples_clustering_woNumbers.pdf", plot=p, width=11.5, height=8)
mapping_gene_locus <- read_tsv("../input/2023-02-24_mapping_trivial_names.tsv", show_col_types=FALSE)
names(mapping_gene_locus) <- c("sgRNA_target", "locus")
DESeq_result_table <- DESeq_result_table %>% left_join(mapping_gene_locus)
annotation <- read_tsv("../input/annotation_locusTags_stand13012021.csv", show_col_types = FALSE)
annotation_2 <- annotation[,c(1,2,3)]
names(annotation_2) <- c("locus", "Gene name","Product")
DESeq_result_table <- DESeq_result_table %>% left_join(annotation_2)
write_tsv(DESeq_result_table, file="../R_results_controlssgRNAs/annotated_DESeq_result_table.tsv")
df_reduced_info <- unique(subset(DESeq_result_table, DESeq_result_table$time==8 | DESeq_result_table$time==14)[,c(2,25,26,27,4,20,21,23,24)])
write_tsv(df_reduced_info, file="../R_results_controlssgRNAs/Reduced_annotated_DESeq_result_table.tsv")
View(annotation)
View(annotation_color_list)
View(annotation_2)
View(DESeq_result_table)
length(names(DESeq_result_table))
write_tsv(DESeq_result_table, file="../R_results_controlssgRNAs/annotated_DESeq_result_table.tsv")
df_reduced_info <- unique(subset(DESeq_result_table, DESeq_result_table$time==8 | DESeq_result_table$time==14)[,c(2,25,26,27,4,20,21,23,24,28)])
write_tsv(df_reduced_info, file="../R_results_controlssgRNAs/Reduced_annotated_DESeq_result_table.tsv")
df_red_wide <- pivot_wider(df_reduced_info, names_from=condition, values_from=c(wmean_fitness, sd_fitness, p_fitness_adj, comb_score))
write_tsv(df_red_wide, file="../R_results_controlssgRNAs/Wide_DESeq_result_table.tsv")
require("knitr")
library(ggplot2)
library(ggrepel)
library(ggpubr)
library(tidyverse)
library(magrittr)
library(clusterProfiler)
library(enrichplot)
library(pheatmap)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
load("../results_controlsgRNAs/fitness/result.Rdata")
num_sgRNAs <- read_tsv("../input/number_sgRNAs_per_target.tsv", col_names = c("sgRNA_target", "num_sgRNAs"))
DESeq_result_table <- left_join(DESeq_result_table, num_sgRNAs)
count_matrix <- read_tsv("../results_controlsgRNAs/prepare/all_counts.tsv")
count_matrix$Gene <- NULL
df_samplesheet <- readr::read_csv("../input/samplesheet_CRISPRi_CO2_Elena.csv", col_types = cols()) %>%
select(all_of(c("sample", "condition", "replicate", "time", "group", "reference_group"))) %>%
dplyr::mutate(group = factor(`group`))
df_samplesheet$name <- paste("gen_", df_samplesheet$time, "_r_", df_samplesheet$replicate, sep="")
require("knitr")
library(ggplot2)
library(ggrepel)
library(ggpubr)
library(tidyverse)
library(magrittr)
library(clusterProfiler)
library(enrichplot)
library(pheatmap)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
load("../results_controlsgRNAs/fitness/result.Rdata")
num_sgRNAs <- read_tsv("../input/number_sgRNAs_per_target.tsv", col_names = c("sgRNA_target", "num_sgRNAs"))
DESeq_result_table <- left_join(DESeq_result_table, num_sgRNAs)
count_matrix <- read_tsv("../results_controlsgRNAs/prepare/all_counts.tsv")
count_matrix$Gene <- NULL
df_samplesheet <- readr::read_csv("../input/samplesheet_CRISPRi_CO2_Elena.csv", col_types = cols()) %>%
select(all_of(c("sample", "condition", "replicate", "time", "group", "reference_group"))) %>%
dplyr::mutate(group = factor(`group`))
df_samplesheet$name <- paste("gen_", df_samplesheet$time, "_r_", df_samplesheet$replicate, sep="")
plot_controls_sgRNAs <- DESeq_result_table %>% filter(grepl("ctrl", sgRNA_target)) %>%
ggplot(aes(x = time, y = log2FoldChange, color = sgRNA_target)) +
geom_line(linewidth = 1) + geom_point(size = 2) + ylim(-5, 5) + facet_wrap(~ condition, ncol = 4)
print(plot_controls_sgRNAs)
ggsave("../R_results_controlssgRNAs/plot_control_sgRNAs.pdf", plot=plot_controls_sgRNAs, width=12, height=12, units="cm")
df_counts <- tidyr::pivot_longer(count_matrix,
cols = 2:ncol(count_matrix),
names_to = "sample", values_to = "n_reads"
)
# sort
df_counts <- arrange(df_counts, sample)
#df_counts <- left_join(df_samplesheet, df_counts)
df_correlation <- df_counts %>%
tidyr::pivot_wider(names_from = "sample", values_from = "n_reads") %>%
dplyr::select(-c(1)) %>%
cor()
# https://bioinformatics.stackexchange.com/questions/22502/manually-set-range-of-colour-scale-in-pheatmap-in-r
color.divisions <- 100
annotation_days = data.frame(row.names=unique(row.names(df_correlation)), generation=as.character(c(0, 0, 0, 10, 10, 10, 4, 4, 4, 8, 8, 8, 0, 0, 0, 0, 10, 10, 10, 10, 4, 4, 4, 4, 8, 8, 8, 8)), condition=c(rep("30perc",12), rep("4perc", 16)), replicate=as.character(c(rep(c(1,2,3),4), rep(c(4,5,6,7), 4))))
# https://stackoverflow.com/questions/41628450/r-pheatmap-change-annotation-colors-and-prevent-graphics-window-from-popping-up
# choose colors for replicate that make difference between the two conditions clearly obvious --> four colours that are similar for HC, three that are similar for LD, let replicate 3 of LD _pop_
# choose gradient of colors for generations
# e.g. Tol from https://davidmathlogic.com/colorblind/#%23D81B60-%231E88E5-%23FFC107-%23004D40
okabe <- c("#f0e442ff", "#e69f00ff", "#d55e00ff", "#cc79a7ff", "#009e73ff", "#56b4e9ff", "#0072b2ff", "#aaaaaaff")
tol <- c("#882255ff","#aa4499ff","#cc6677ff","#ddcc77ff","#88cceeff","#44aa99ff","#117733ff","#332288ff")
okabe_gen <- okabe
names(okabe_gen) <- unique(annotation_days$generation)
okabe_replic <- okabe[1:7]
names(okabe_replic) <- unique(annotation_days$replicate)
annotation_color_list <- list(condition=c("cont"=okabe[7], "LD"=okabe[2]), generation=okabe_gen, replicate=okabe_replic)
okabe <- c("#fff2ecff","#f0e442ff", "#f5a700ff", "#9a4400ff")
okabe_gen <- okabe
names(okabe_gen) <- c("0", "4", "8", "10")
based_on_col <- c("#ff9dd5ff","#cc84aeff","#9a5b83ff","#009affff","#007acbff","#005b98ff","#003d66ff")
names(based_on_col) <- unique(annotation_days$replicate)
annotation_color_list <- list(condition=c("4perc"="#005a96ff", "30perc"="#c57ba5ff"), replicate=based_on_col, generation=okabe_gen)
p <- pheatmap(df_correlation, display_numbers=TRUE, treeheight_col=0, cutree_rows = 6, cutree_cols = 6, annotation_row = annotation_days, annotation_colors = annotation_color_list, breaks = seq(-1,1, length.out=(color.divisions + 1)))
p
ggsave("../R_results_controlssgRNAs/correlation/correlation_samples_clustering.png", plot=p, width=11.5, height=8)
ggsave("../R_results_controlssgRNAs/correlation/correlation_samples_clustering.pdf", plot=p, width=11.5, height=8)
p <- pheatmap(df_correlation, display_numbers=FALSE, treeheight_col=0, cutree_rows = 6, cutree_cols = 6, annotation_row = annotation_days, annotation_colors = annotation_color_list, breaks = seq(-1,1, length.out=(color.divisions + 1)))
p
ggsave("../R_results_controlssgRNAs/correlation/correlation_samples_clustering_woNumbers.png", plot=p, width=11.5, height=8)
ggsave("../R_results_controlssgRNAs/correlation/correlation_samples_clustering_woNumbers.pdf", plot=p, width=11.5, height=8)
mapping_gene_locus <- read_tsv("../input/2023-02-24_mapping_trivial_names.tsv", show_col_types=FALSE)
names(mapping_gene_locus) <- c("sgRNA_target", "locus")
DESeq_result_table <- DESeq_result_table %>% left_join(mapping_gene_locus)
annotation <- read_tsv("../input/annotation_locusTags_stand13012021.csv", show_col_types = FALSE)
annotation_2 <- annotation[,c(1,2,3)]
names(annotation_2) <- c("locus", "Gene name","Product")
DESeq_result_table <- DESeq_result_table %>% left_join(annotation_2)
write_tsv(DESeq_result_table, file="../R_results_controlssgRNAs/annotated_DESeq_result_table.tsv")
df_reduced_info <- unique(subset(DESeq_result_table, DESeq_result_table$time==8 | DESeq_result_table$time==14)[,c(2,25,26,27,4,20,21,23,24,28)])
write_tsv(df_reduced_info, file="../R_results_controlssgRNAs/Reduced_annotated_DESeq_result_table.tsv")
df_red_wide <- pivot_wider(df_reduced_info, names_from=condition, values_from=c(wmean_fitness, sd_fitness, p_fitness_adj, comb_score))
write_tsv(df_red_wide, file="../R_results_controlssgRNAs/Wide_DESeq_result_table.tsv")
View(df_red_wide)
df_red_wide <- pivot_wider(df_reduced_info, names_from=condition, values_from=c(wmean_fitness, sd_fitness, p_fitness_adj, comb_score))
df_red_wide$impact_score <- (df_red_wide$wmean_fitness_CO2_30percent - df_red_wide$wmean_fitness_CO2_4percent)/sqrt(2)
write_tsv(df_red_wide, file="../R_results_controlssgRNAs/Wide_DESeq_result_table.tsv")
sqrt(2)
require("knitr")
library(ggplot2)
library(ggrepel)
library(ggpubr)
library(tidyverse)
library(magrittr)
library(clusterProfiler)
library(enrichplot)
library(pheatmap)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
load("../results_controlsgRNAs/fitness/result.Rdata")
num_sgRNAs <- read_tsv("../input/number_sgRNAs_per_target.tsv", col_names = c("sgRNA_target", "num_sgRNAs"))
DESeq_result_table <- left_join(DESeq_result_table, num_sgRNAs)
count_matrix <- read_tsv("../results_controlsgRNAs/prepare/all_counts.tsv")
count_matrix$Gene <- NULL
df_samplesheet <- readr::read_csv("../input/samplesheet_CRISPRi_CO2_Elena.csv", col_types = cols()) %>%
select(all_of(c("sample", "condition", "replicate", "time", "group", "reference_group"))) %>%
dplyr::mutate(group = factor(`group`))
df_samplesheet$name <- paste("gen_", df_samplesheet$time, "_r_", df_samplesheet$replicate, sep="")
plot_controls_sgRNAs <- DESeq_result_table %>% filter(grepl("ctrl", sgRNA_target)) %>%
ggplot(aes(x = time, y = log2FoldChange, color = sgRNA_target)) +
geom_line(linewidth = 1) + geom_point(size = 2) + ylim(-5, 5) + facet_wrap(~ condition, ncol = 4)
print(plot_controls_sgRNAs)
ggsave("../R_results_controlssgRNAs/plot_control_sgRNAs.pdf", plot=plot_controls_sgRNAs, width=12, height=12, units="cm")
View(DESeq_result_table)
subs <- unique(DESeq_result_table[,c("sgRNA", "condition", "wmean_fitness")])
p <- ggplot(subs, aes(x=wmean_fitness, group=condition, fill=condition)) + hist()
subs <- unique(DESeq_result_table[,c("sgRNA", "condition", "wmean_fitness")])
p <- ggplot(subs, aes(x=wmean_fitness, group=condition, fill=condition)) + geom_density(adjust=1.5, alpha=.4) + theme_light()
p
subs <- unique(DESeq_result_table[,c("sgRNA", "condition", "wmean_fitness")])
p <- ggplot(subs, aes(x=wmean_fitness, group=condition, fill=condition)) + geom_density(adjust=1.5, alpha=.4) + theme_light() + scale_fill_manual(values=c("4perc"="#005a96ff", "30perc"="#c57ba5ff"))
p
unique(subs$condition)
subs <- unique(DESeq_result_table[,c("sgRNA", "condition", "wmean_fitness")])
p <- ggplot(subs, aes(x=wmean_fitness, group=condition, fill=condition)) + geom_density(adjust=1.5, alpha=.4) + theme_light() + scale_fill_manual(values=c("CO2_4percent"="#005a96ff", "CO2_30percent"="#c57ba5ff"))
p
subs <- unique(DESeq_result_table[,c("sgRNA", "condition", "wmean_fitness")])
p <- ggplot(subs, aes(x=wmean_fitness, group=condition, fill=condition)) + geom_density(adjust=1.5, alpha=.4) + theme_light() + scale_fill_manual(values=c("CO2_4percent"="#005a96ff", "CO2_30percent"="#c57ba5ff"))
p
ggsave("../R_results_controlssgRNAs/wmean_fitness_sgRNA-level_densityplot.pdf", plot=p, width=11.5, height=8)
ggsave("../R_results_controlssgRNAs/wmean_fitness_sgRNA-level_densityplot.png", plot=p, width=11.5, height=8)
subs <- unique(DESeq_result_table[,c("sgRNA_target", "condition", "wmean_fitness")])
p <- ggplot(subs, aes(x=wmean_fitness, group=condition, fill=condition)) + geom_density(adjust=1.5, alpha=.4) + theme_light() + scale_fill_manual(values=c("CO2_4percent"="#005a96ff", "CO2_30percent"="#c57ba5ff"))
p
ggsave("../R_results_controlssgRNAs/wmean_fitness_sgRNAtarget-level_densityplot.pdf", plot=p, width=11.5, height=8)
ggsave("../R_results_controlssgRNAs/wmean_fitness_sgRNAtarget-level_densityplot.png", plot=p, width=11.5, height=8)
subs <- unique(DESeq_result_table[,c("sgRNA", "condition", "wmean_fitness")])
subs <- unique(DESeq_result_table[,c("sgRNA_target", "condition", "wmean_fitness")])
